import streamlit as st
import sqlite3
import pandas as pd
import re
import io
from datetime import datetime
from PIL import Image
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="FISPA - Fiscaliza√ß√£o e Pavimenta√ß√£o", layout="wide")

# Fun√ß√£o para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)  # Remove caracteres n√£o num√©ricos
    return len(cpf) == 11 and cpf.isdigit()

# Fun√ß√£o para salvar imagem no banco
def salvar_imagem(imagem):
    """Converte uma imagem em bytes para armazenamento no banco de dados."""
    buf = io.BytesIO()
    if imagem.mode != "RGB":
        imagem = imagem.convert("RGB")
    imagem.save(buf, format="JPEG", quality=85)
    return buf.getvalue()

# Fun√ß√£o para conectar ao banco de dados
def conectar_banco():
    return sqlite3.connect("sistema.db", check_same_thread=False)

# Criar tabela no banco de dados (se n√£o existir)
conn = conectar_banco()
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS sistema (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data TEXT NOT NULL,
    nome TEXT NOT NULL,
    cpf TEXT NOT NULL,
    telefone TEXT NOT NULL,
    bairro TEXT NOT NULL,
    endereco TEXT NOT NULL,
    comentario TEXT,
    imagem BLOB,
    status TEXT DEFAULT 'Em Aberto' CHECK(status IN ('Em Aberto', 'Em Andamento', 'Conclu√≠do'))
)
''')
conn.commit()
conn.close()

# Interface do Streamlit
st.title("FISPA - Fiscaliza√ß√£o e Pavimenta√ß√£o")

# Menu de navega√ß√£o
menu = st.sidebar.radio("Menu", ["In√≠cio", "Requerimento", "Dashboard", "Status ADM", "Baixar Dados"])

# =============================== Tela In√≠cio ==============================
if menu == "In√≠cio":
    st.header("Bem-vindo ao Sistema FISPA!")
    st.image("img/coordenador.jpg", caption="Coordenador", width=600)
    st.write("Use o menu ao lado para navegar pelo sistema.")

# ============================== Tela Requerimento ==============================
elif menu == "Requerimento":
    st.header("üìå Formul√°rio de Requerimento")

    nome = st.text_input("Nome")
    cpf = st.text_input("CPF")
    telefone = st.text_input("Telefone")
    bairro = st.selectbox("Bairro", ["Aldeia da Paz", "Centro", "Parque das Rosas", "Vila Uni√£o", "Outros"])
    endereco = st.text_input("Endere√ßo")
    comentario = st.text_area("Coment√°rio")
    imagem_file = st.file_uploader("Imagem", type=["jpg", "jpeg", "png"])

    if st.button("Salvar"):
        erro_msg = []

        if not nome:
            erro_msg.append("Nome √© obrigat√≥rio.")
        if not cpf or not validar_cpf(cpf):
            erro_msg.append("CPF inv√°lido.")
        if not telefone:
            erro_msg.append("Telefone √© obrigat√≥rio.")
        if not endereco:
            erro_msg.append("Endere√ßo √© obrigat√≥rio.")
        if not imagem_file:
            erro_msg.append("Imagem √© obrigat√≥ria.")

        if erro_msg:
            st.error("‚ö†Ô∏è Erros encontrados:\n" + "\n".join(erro_msg))
        else:
            imagem = Image.open(imagem_file)
            imagem_bytes = salvar_imagem(imagem)

            data_atual = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
            conn = conectar_banco()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO sistema (data, nome, cpf, telefone, bairro, endereco, comentario, imagem)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (data_atual, nome, cpf, telefone, bairro, endereco, comentario, imagem_bytes))
            conn.commit()
            conn.close()
            st.success("‚úÖ Requerimento salvo com sucesso!")

# ============================== Tela Dashboard ==============================
elif menu == "Dashboard":
    st.header("üìä Dashboard Interativo")

    conn = conectar_banco()
    status_data = pd.read_sql_query("SELECT status, COUNT(*) as quantidade FROM sistema GROUP BY status", conn)
    bairro_data = pd.read_sql_query("SELECT bairro, COUNT(*) as quantidade FROM sistema GROUP BY bairro", conn)
    ranking_data = pd.read_sql_query("""
        SELECT nome, COUNT(*) as total_requerimentos 
        FROM sistema 
        GROUP BY nome
        ORDER BY total_requerimentos DESC 
        LIMIT 10
    """, conn)
    conn.close()

    st.subheader("üìå Quantidade de Requerimentos por Status")
    fig_status = px.bar(status_data, x="status", y="quantidade", text="quantidade", title="Status dos Requerimentos")
    st.plotly_chart(fig_status)

    st.subheader("üè† Requerimentos por Bairro")
    fig_bairro = px.bar(bairro_data, x="quantidade", y="bairro", text="quantidade", title="Requerimentos por Bairro")
    st.plotly_chart(fig_bairro)

    st.subheader("üèÜ Top 10 Usu√°rios")
    st.dataframe(ranking_data)
    fig_ranking = px.bar(ranking_data, x="total_requerimentos", y="nome", text="total_requerimentos", title="Usu√°rios com Mais Requerimentos")
    st.plotly_chart(fig_ranking)

# ============================== Tela Baixar Dados ==============================
elif menu == "Baixar Dados":
    st.header("üì• Baixar Dados")

    conn = conectar_banco()
    data = pd.read_sql_query("SELECT * FROM sistema", conn)
    conn.close()

    if not data.empty:
        csv = data.to_csv(index=False).encode("utf-8")
        st.download_button("üì• Baixar CSV", csv, "dados_fispa.csv", "text/csv")


# ============================== Tela Status ADM ==============================
elif menu == "Status ADM":
    senha = st.text_input("üîë Digite a senha de acesso", type="password")

    if senha == "adm777":
        st.header("üìå Atualizar Status e Visualizar Imagem")

        # Conectar ao banco e buscar dados
        conn = conectar_banco()
        data = pd.read_sql_query("SELECT id, data, nome, bairro, status, imagem FROM sistema", conn)
        conn.close()

        if not data.empty:
            data_display = data.drop(columns=["imagem"])  # Ocultar imagens na tabela
            st.dataframe(data_display)  # Exibir tabela geral dos requerimentos

            # Selecionar um ID
            id_selecionado = st.selectbox("üîç Selecione um ID para visualizar detalhes", [""] + data["id"].astype(str).tolist())

            # Verificar se um ID foi selecionado
            if id_selecionado:
                id_selecionado = int(id_selecionado)  # Converter para inteiro

                # Criar bot√£o para mostrar detalhes do cadastro
                if st.button("üìÑ Mostrar Cadastro"):
                    # Filtrar os dados do requerimento selecionado
                    requerimento = data[data["id"] == id_selecionado].iloc[0]

                    # Exibir os detalhes do requerimento selecionado
                    st.subheader(f"üìÑ Detalhes do Requerimento #{id_selecionado}")
                    st.write(f"üóì **Data:** {requerimento['data']}")
                    st.write(f"üë§ **Nome:** {requerimento['nome']}")
                    st.write(f"üè† **Bairro:** {requerimento['bairro']}")
                    st.write(f"üìå **Status:** {requerimento['status']}")

                    # Bot√£o para mostrar a imagem
                    if st.button(f"üì∑ Mostrar Imagem do Requerimento"):
                        if requerimento["imagem"]:
                            st.image(io.BytesIO(requerimento["imagem"]), caption=f"Imagem do Requerimento #{id_selecionado}")
                        else:
                            st.warning("‚ö†Ô∏è Nenhuma imagem dispon√≠vel para este requerimento.")

                    # Op√ß√£o para atualizar o status do requerimento
                    novo_status = st.selectbox("üìç Novo Status", ["Em Aberto", "Em Andamento", "Conclu√≠do"])

                    if st.button("‚úÖ Atualizar Status"):
                        conn = conectar_banco()
                        cursor = conn.cursor()
                        cursor.execute("UPDATE sistema SET status = ? WHERE id = ?", (novo_status, id_selecionado))
                        conn.commit()
                        conn.close()
                        st.success(f"‚úÖ Status do Requerimento #{id_selecionado} atualizado para '{novo_status}'!")
    else:
        st.error("üîí Senha incorreta.")
