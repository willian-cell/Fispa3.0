import streamlit as st
import sqlite3
import pandas as pd
import re
import io
from datetime import datetime
from PIL import Image
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="FISPA - Fiscaliza√ß√£o e Pavimenta√ß√£o", layout="wide")

# Fun√ß√£o para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)  # Remove caracteres n√£o num√©ricos
    return len(cpf) == 11 and cpf.isdigit()

# Fun√ß√£o para salvar imagem no banco
def salvar_imagem(imagem):
    """Converte uma imagem em bytes para armazenamento no banco de dados."""
    buf = io.BytesIO()
    if imagem.mode != "RGB":
        imagem = imagem.convert("RGB")
    imagem.save(buf, format="JPEG", quality=85)
    return buf.getvalue()

# Fun√ß√£o para conectar ao banco de dados
def conectar_banco():
    return sqlite3.connect("sistema.db", check_same_thread=False)

# Criar tabela no banco de dados (se n√£o existir)
conn = conectar_banco()
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS sistema (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data TEXT NOT NULL,
    nome TEXT NOT NULL,
    cpf TEXT NOT NULL,
    telefone TEXT NOT NULL,
    bairro TEXT NOT NULL,
    endereco TEXT NOT NULL,
    comentario TEXT,
    imagem BLOB,
    status TEXT DEFAULT 'Em Aberto' CHECK(status IN ('Em Aberto', 'Em Andamento', 'Conclu√≠do'))
)
''')
conn.commit()
conn.close()

# Interface do Streamlit
st.title("FISPA - Fiscaliza√ß√£o e Pavimenta√ß√£o")

# Menu de navega√ß√£o
menu = st.sidebar.radio("Menu", ["In√≠cio", "Requerimento", "Dashboard", "Status ADM", "Baixar Dados"])

# =============================== Tela In√≠cio ==============================
if menu == "In√≠cio":
    st.header("Bem-vindo ao Sistema FISPA!")
    st.image("img/coordenador.jpg", caption="Coordenador", width=600)
    st.write("Use o menu ao lado para navegar pelo sistema.")

# ============================== Tela Requerimento ==============================
elif menu == "Requerimento":
    st.header("üìå Formul√°rio de Requerimento")

    nome = st.text_input("Nome")
    cpf = st.text_input("CPF")
    telefone = st.text_input("Telefone")
    bairro = st.selectbox("Bairro", [
        "Aldeia da Paz", "√Årea Rural de Santo Ant√¥nio do Descoberto", "Beira Rio", "Beira Rio II", "Centro",
        "Conjunto Habitacional Concei√ß√£o Gomes Rabelo", "Fazenda Capoeirinha", "Jardim Ana Beatriz I",
        "Jardim Ana Beatriz II", "Jardim de Al√°", "Mans√µes Bittencourt", "Meu Lote Minha Casa",
        "Parque das Rosas", "Parque Estrela Dalva XI", "Parque Estrela Dalva XI-A", "Parque Estrela Dalva XII",
        "Parque Estrela Dalva XIII", "Parque Estrela Dalva XIV", "Parque Estrela Dalva XV", "Parque Estrela Dalva XVI",
        "Parque Estrela Dalva XVII", "Parque Santo Ant√¥nio", "Residencial Mangueiras", "Setor de Ind√∫stria",
        "Vila Betel", "Vila Cortes", "Vila Esperan√ßa", "Vila Maria Auxiliadora", "Vila Montes Claros",
        "Vila Montes Claros II", "Vila Para√≠so I", "Vila Para√≠so II", "Vila Para√≠so III", "Vila Parque",
        "Vila Raio de Luz", "Vila S√£o Luiz", "Vila S√£o Luiz II", "Vila Uni√£o", "Outros"
    ])
    endereco = st.text_input("Endere√ßo")
    comentario = st.text_area("Coment√°rio")
    imagem_file = st.file_uploader("Imagem", type=["jpg", "jpeg", "png"])

    if st.button("Salvar"):
        erro_msg = []

        if not nome:
            erro_msg.append("Nome √© obrigat√≥rio.")
        if not cpf or not validar_cpf(cpf):
            erro_msg.append("CPF inv√°lido.")
        if not telefone:
            erro_msg.append("Telefone √© obrigat√≥rio.")
        if not endereco:
            erro_msg.append("Endere√ßo √© obrigat√≥rio.")
        if not imagem_file:
            erro_msg.append("Imagem √© obrigat√≥ria.")

        if erro_msg:
            st.error("‚ö†Ô∏è Erros encontrados:\n" + "\n".join(erro_msg))
        else:
            imagem = Image.open(imagem_file)
            imagem_bytes = salvar_imagem(imagem)

            data_atual = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
            conn = conectar_banco()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO sistema (data, nome, cpf, telefone, bairro, endereco, comentario, imagem)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (data_atual, nome, cpf, telefone, bairro, endereco, comentario, imagem_bytes))
            conn.commit()
            conn.close()
            st.success("‚úÖ Requerimento salvo com sucesso!")

# ============================== Tela Dashboard ==============================
elif menu == "Dashboard":
    st.header("üìä Dashboard Interativo")

    conn = conectar_banco()
    status_data = pd.read_sql_query("SELECT status, COUNT(*) as Quantidade FROM sistema GROUP BY status", conn)
    bairro_data = pd.read_sql_query("SELECT bairro, COUNT(*) as Quantidade FROM sistema GROUP BY bairro", conn)
    ranking_data = pd.read_sql_query("""
        SELECT nome, COUNT(*) as total_requerimentos 
        FROM sistema 
        GROUP BY nome
        ORDER BY total_requerimentos DESC 
        LIMIT 10
    """, conn)
    conn.close()

    # üîπ Gr√°fico de Barras - Quantidade de Requerimentos por Status
    st.subheader("üìå Quantidade de Requerimentos por Status")
    conn = conectar_banco()
    status_data = pd.read_sql_query("SELECT status, COUNT(*) as Quantidade FROM sistema GROUP BY status", conn)
    conn.close()

    # Defini√ß√£o de cores para cada status
    status_colors = {
        "Em Aberto": "red",
        "Em Andamento": "orange",
        "Conclu√≠do": "green"
    }
    
    # Criar gr√°fico de barras verticais com cores personalizadas
    fig_status = px.bar(
        status_data, 
        x="status", 
        y="Quantidade", 
        color="status",
        color_discrete_map=status_colors,
        text="Quantidade",
        title="Distribui√ß√£o de Status dos Requerimentos"
    )
    fig_status.update_layout(xaxis_title="Status", yaxis_title="Quantidade")
    st.plotly_chart(fig_status)

    st.subheader("üè† Requerimentos por Bairro")
    fig_bairro = px.bar(bairro_data, x="Quantidade", y="bairro", text="Quantidade", title="Requerimentos por Bairro")
    st.plotly_chart(fig_bairro)

    st.subheader("üèÜ Top 10 Usu√°rios")
    st.dataframe(ranking_data)
    fig_ranking = px.bar(ranking_data, x="total_requerimentos", y="nome", text="total_requerimentos", title="Usu√°rios com Mais Requerimentos")
    st.plotly_chart(fig_ranking)

# ============================== Tela Baixar Dados ==============================
elif menu == "Baixar Dados":
    st.header("üì• Baixar Dados")

    conn = conectar_banco()
    query = "SELECT id, data, nome, cpf, telefone, bairro, endereco, comentario, status FROM sistema"
    data = pd.read_sql_query(query, conn)
    conn.close()

    if not data.empty:
        # üîπ Renomeando colunas para melhor legibilidade
        data.rename(columns={
            "id": "ID",
            "data": "Data do Requerimento",
            "nome": "Nome do Requerente",
            "cpf": "CPF",
            "telefone": "Telefone",
            "bairro": "Bairro",
            "endereco": "Endere√ßo",
            "comentario": "Coment√°rio",
            "status": "Status"
        }, inplace=True)

        # üîπ Ordenando os dados por ID (do mais recente para o mais antigo)
        data = data.sort_values(by="ID", ascending=False)

        # üîπ Convertendo para CSV formatado (separador ; para Excel)
        csv = data.to_csv(index=False, sep=";", encoding="utf-8").encode("utf-8")

        # üîπ Bot√£o para download
        st.download_button(
            label="üì• Baixar CSV Formatado",
            data=csv,
            file_name="dados_fispa.csv",
            mime="text/csv"
        )
    else:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para download.")

# ============================== Tela Status ADM ==============================
elif menu == "Status ADM":
    st.header("üîë Painel Administrativo - Gerenciamento de Requerimentos")

    # Solicita√ß√£o de senha para acesso
    senha = st.text_input("üîê Insira a senha de acesso:", type="password")

    # Senha correta para acesso administrativo
    senha_correta = "adm777"

    if senha == senha_correta:
        st.success("‚úÖ Acesso autorizado!")
        
        # Conectar ao banco e buscar dados
        conn = conectar_banco()
        query = "SELECT id, data, nome, bairro, status, imagem FROM sistema"
        data = pd.read_sql_query(query, conn)
        conn.close()

        if not data.empty:
            # Ocultar a coluna de imagem na exibi√ß√£o da tabela
            data_display = data.drop(columns=["imagem"], errors="ignore")
            st.subheader("üìã Requerimentos Cadastrados")
            st.dataframe(data_display)

            # Selecionar um ID para visualiza√ß√£o detalhada
            id_selecionado = st.selectbox(
                "üîç Selecione um requerimento para detalhes:", 
                [""] + data["id"].astype(str).tolist()
            )

            if id_selecionado:
                id_selecionado = int(id_selecionado)  # Converter para inteiro

                # Filtrar o requerimento correspondente ao ID selecionado
                requerimento = data.query("id == @id_selecionado").copy()

                if not requerimento.empty:
                    requerimento = requerimento.iloc[0]  # Obter a primeira linha correspondente

                    # Exibir detalhes do requerimento
                    with st.expander(f"üìÑ Detalhes do Requerimento #{id_selecionado}", expanded=True):
                        st.write(f"üóì **Data:** {requerimento['data']}")
                        st.write(f"üë§ **Nome:** {requerimento['nome']}")
                        st.write(f"üè† **Bairro:** {requerimento['bairro']}")
                        st.write(f"üìå **Status:** {requerimento['status']}")

                        # Exibir imagem associada ao requerimento, se dispon√≠vel
                        if requerimento["imagem"]:
                            st.image(io.BytesIO(requerimento["imagem"]), caption=f"üì∑ Imagem do Requerimento #{id_selecionado}")
                        else:
                            st.warning("‚ö†Ô∏è Nenhuma imagem dispon√≠vel para este requerimento.")

                    # Se√ß√£o para atualiza√ß√£o do status
                    novo_status = st.selectbox("üìç Atualizar Status:", ["Em Aberto", "Em Andamento", "Conclu√≠do"])

                    if st.button("‚úÖ Confirmar Atualiza√ß√£o"):
                        conn = conectar_banco()
                        cursor = conn.cursor()
                        cursor.execute("UPDATE sistema SET status = ? WHERE id = ?", (novo_status, id_selecionado))
                        conn.commit()
                        conn.close()
                        st.success(f"‚úÖ Status do Requerimento #{id_selecionado} atualizado para '{novo_status}'!")
                        st.rerun()
                else:
                    st.warning(f"‚ö†Ô∏è Nenhum requerimento encontrado para o ID {id_selecionado}.")
        else:
            st.warning("‚ö†Ô∏è Nenhum requerimento cadastrado no sistema.")
    else:
        st.error("üîí Acesso negado! Senha incorreta.")
